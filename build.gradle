buildscript {
	repositories {
		jcenter()
	}
	dependencies {
		classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
		classpath group: 'edu.sc.seis.gradle', name: 'launch4j', version: '2.3.0+'
	}
}

repositories {
	jcenter()
	mavenCentral()
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'edu.sc.seis.launch4j'

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileJava.options.encoding = 'UTF-8'

dependencies {
	compile group: 'org.json', name: 'json', version: '20160810+'
	compile group: 'org.codehaus.groovy', name: 'groovy', version: '2.4.7+'
	compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.5+'
	compile group: 'org.apache.commons', name: 'commons-io', version: '1.3.2+'
	compile group: 'org.apache.ivy', name: 'ivy', version: '2.2.0+'
	compile group: 'com.dorkbox', name: 'SystemTray', version: '3.1+'
	compile group: 'org.javassist', name: 'javassist', version: '3.22+'
	compile group: 'org.controlsfx', name: 'controlsfx', version: '8.40.12+'
	testCompile group: 'junit', name: 'junit', version: '4.+'
}

mainClassName = 'info.deskchan.core.Main'

jar {
	baseName = project.name
	
	manifest {
		attributes 'Main-Class': mainClassName
	}
}

shadowJar {
	baseName = "${project.name}-full"
	classifier = null
	version = null
}

distZip {
	into(project.name) {
		from "${projectDir}/data"
	}
	into(project.name + '/plugins') {
		from "${projectDir}/plugins"
	}
}

distTar {
	into(project.name) {
		from "${projectDir}/data"
	}
	into(project.name + '/plugins') {
		from "${projectDir}/plugins"
	}
}

createExe {
	outfile = "bin/${project.name}.exe"
	mainClassName = project.mainClassName
	copyConfigurable = files()
	jar = "${buildDir}/libs/${project.tasks.shadowJar.archiveName}"
	icon = 'appicon.ico'
	copy {
		from "${projectDir}/data"
		into "${buildDir}/launch4j"
	}
	copy {
		from "${projectDir}/plugins"
		into "${buildDir}/launch4j/plugins"
	}
	doLast {
		delete "${buildDir}/launch4j/appicon.ico"
	}
}

task createStartScriptsForExe(type: CreateStartScripts) {
	outputDir = file("${buildDir}/launch4j/bin")
	mainClassName = createExe.mainClassName
	applicationName = project.name
	classpath = files(createExe.outfile)
	doLast {
		def windowsScriptFile = file getWindowsScript()
		def unixScriptFile = file getUnixScript()
		windowsScriptFile.text = windowsScriptFile.text.replace("lib\\${project.name}.exe", "bin\\${project.name}.exe")
		unixScriptFile.text = unixScriptFile.text.replace("lib/${project.name}.exe", "bin/${project.name}.exe")
	}
}

task copyIconForExe(type: Copy) {
	from "${projectDir}/misc/appicon.ico"
	into "${buildDir}/launch4j"
}

task createExeDistZip(type: Zip) {
	from "${buildDir}/launch4j"
	include '*'
	include '*/*'
	include '*/*/*'
	include '*/*/*/*'
	include '*/*/*/*/*'
	include '*/*/*/*/*/*'
	include '*/*/*/*/*/*/*'
	exclude 'data'
	archiveName "${project.name}-full.zip"
	destinationDir file("${buildDir}/distributions")
}

createExe.dependsOn createStartScriptsForExe
createExe.dependsOn copyIconForExe
createExeDistZip.dependsOn createExe


// Jython specific

task cleanCompiledJythonClasses(type: Delete) {
	delete fileTree('plugins').include('**/*$py.class')
}
